@{
    ViewBag.Title = "Home Page";
}

<main>
    <section class="row" aria-labelledby="aspnetTitle">
        <h1 id="title">Assignment 1 - Yujin Kim</h1>
        <p class="lead">This is a website for concert halls </p>
    </section>

    <div class="row">
        <section class="col-md-6" aria-labelledby="gettingStartedTitle">
            <h2 id="WhatILearned">I learned ...</h2>
            <p>
                During the process of completing this web project, I gained valuable insights into various aspects of web development and data manipulation. 
                Specifically, I learned how to utilize AutoMapper to seamlessly add, delete, and update data on the web interface. 
                Furthermore, I delved deep into the intricacies of the C# MVC system, understanding how to appropriately segment and organize data, views, and controllers for effective and efficient web operations.
            </p>
        </section>
        <section class="col-md-6" aria-labelledby="librariesTitle">
            <h2 id="WhatIStruggledWith">I struggled with ...</h2>
            <p>
                One of the challenges I faced was in the domain of data mapping between different models or between models and data entities. 
                Whenever there were disparate attributes between two models or entities, it was crucial to ensure that these differences were adequately addressed, either by ignoring the mismatched attributes or by mapping them in an alternate way. 
                A particular instance that stands out was when transitioning from the venueBaseView to the form for editing. 
                I grappled with the confusion of how to handle the newly introduced attributes. 
                Fortunately, I found a solution by initializing these attributes, which not only addressed the mapping issue but also streamlined the overall process.
            </p>
        </section>
    </div>
</main>